// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?          @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          String            @default("USER")
  disabled      Boolean           @default(false)
  preferredLanguage String        @default("en")
  marketingEmails   Boolean       @default(false)
  accounts      Account[]
  sessions      Session[]
  bookings      Booking[]
  auditActorLogs  AuditLog[]    @relation("AuditActor")
  auditTargetLogs AuditLog[]    @relation("AuditTarget")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([role])
  @@index([disabled])
  @@index([createdAt])
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Booking {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  requestNumber String?
  details    Json
  status     BookingStatus @default(PENDING)

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([createdAt])
  @@index([status])
  @@index([userId, createdAt])
}

enum BookingStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
}

model AuditLog {
  id            String       @id @default(cuid())
  actorId       String
  actor         User         @relation("AuditActor", fields: [actorId], references: [id], onDelete: Cascade)
  targetUserId  String
  targetUser    User         @relation("AuditTarget", fields: [targetUserId], references: [id], onDelete: Cascade)
  action        AuditAction
  details       Json
  createdAt     DateTime     @default(now())

  @@index([targetUserId, createdAt])
  @@index([actorId, createdAt])
  @@index([action])
}

enum AuditAction {
  USER_ROLE_CHANGED
  USER_DISABLED_TOGGLED
}
