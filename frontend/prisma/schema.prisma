// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String            @id @default(cuid())
  firstName          String?
  lastName           String?
  address            String?
  email              String            @unique
  emailVerified      DateTime?
  image              String?
  role               String?           @default("USER")
  organizationId     String?
  // organization       Organization?     @relation(fields: [organizationId], references: [id])
  // role               Role              @default(USER)
  // password           String?
  // passwordResetToken String?
  // passwordResetTokenExpires DateTime?
  // emailVerificationToken String?
  // emailVerificationTokenExpires DateTime?
  // twoFactorEnabled   Boolean           @default(false)
  // twoFactorSecret    String?
  // twoFactorRecovery  String?
  // twoFactorRecoveryCodes String[]
  accounts           Account[]
  sessions           Session[]
  // Optional for WebAuthn support
  Authenticator      Authenticator[]
  invoices           Invoice[]
  taxInvoiceReceipts TaxInvoiceReipt[]
  vouchers           Voucher[]
  organizations      Organization[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Role {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RoleAssignment {
  id        String   @id @default(uuid())
  userId    String
  roleId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RolePermission {
  id           String   @id @default(uuid())
  roleId       String
  permissionId String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Permission {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PermissionAssignment {
  id           String   @id @default(uuid())
  userId       String
  permissionId String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model RequestBooking {
  id            String @id @default(uuid())
  requestNumber String
  firstName     String
  lastName      String
  email         String

  phone  String?
  mobile String?

  whatsApp  String?
  line      String?
  skype     String?
  facebook  String?
  twitter   String?
  linkedIn  String?
  instagram String?

  address String?

  userId   String?
  clientId String?
  vendorId String?

  date      DateTime
  time      String
  validDate DateTime?

  arrival        DateTime?
  departure      DateTime?
  flightNo       String?
  flightDateTime String?

  distance Int
  rate     Int
  quantity Int?
  total    Int?

  carType  String
  carModel String

  pickupPoint  String
  dropoffPoint String

  agreement Boolean
  note      String?
  status    RequestStatus? @default(PENDING)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum RequestStatus {
  PENDING
  AGREED
  CONFIRMED
  APPROVED
  REJECTED
  CANCELLED
}

model PurchasingRequest {
  id            String                 @id @default(uuid())
  number        String
  userId        String
  clientId      String // buyer
  vendorId      String // suplier
  requestId     String // user can request by note or email 
  total         Int
  date          DateTime
  validDate     DateTime
  fromName      String // suplier
  fromEmail     String
  fromAddress   String
  clientName    String // buyer
  clientEmail   String
  clientAddress String
  note          String?
  status        PurchasingReqestStatus

  items Item[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PurchasingOrder {
  id                  String                @id @default(uuid())
  number              String
  userId              String
  clientId            String // buyer
  purchasingRequestId String
  vendorId            String // suplier
  requestId           String
  total               Int
  date                DateTime
  validDate           DateTime
  fromName            String // suplier
  fromEmail           String
  fromAddress         String
  clientName          String // buyer
  clientEmail         String
  clientAddress       String
  note                String?
  status              PurchasingOrderStatus

  items Item[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Quotation {
  id            String @id @default(uuid())
  invoiceNumber String

  userId            String
  clientId          String // buyer
  vendorId          String // suplier
  purchasingOrderId String

  total Int

  date          DateTime
  validDate     DateTime
  fromName      String // suplier
  fromEmail     String
  fromAddress   String
  clientName    String // buyer
  clientEmail   String
  clientAddress String
  note          String?

  status QuotationStatus

  items Item[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Invoice Model Schema
model Invoice {
  id String @id @default(uuid())

  title         String
  invoiceNumber String   @default("INV-1112230001")
  date          DateTime

  fromName    String // suplier
  fromEmail   String
  fromAddress String

  clientName    String // buyer
  clientEmail   String
  clientAddress String

  clientId    String @default("1") // buyer and hidden input
  vendorId    String @default("1") // suplier
  quotationId String @default("1") // and hidden input
  // dueDate     DateTime @default(now()) // and hidden input
  dueDate     String @default("cash")

  subTotal        Int     @default(0)
  discountPercent Int     @default(0)
  discountTotal   Int     @default(0)
  vatPercent      Int     @default(7)
  vatTotal        Int     @default(0)
  note            String?

  itemId          String @default("F2-111223")
  itemModel       String @default("MOD-111223")
  itemName        String @default("Account Anywhrer")
  itemDescription String @default("Accpount made simple from anywhere service")
  itemQuantity    Int    @default(0)
  itemRate        Int    @default(0)
  itemTotal       Int    @default(0)

  total    Int    @default(0)
  currency String @default("THB")

  // items Item[]

  reviseNumber Int      @default(1) //revise number
  reviseDate   DateTime @default(now()) //revise date 
  revise       String   @default("11121980-01") //revise date - revise number

  status InvoiceStatus

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User   User?   @relation(fields: [userId], references: [id])
  userId String?
  // Item   Item[]
}

model Receipt {
  id            String        @id @default(uuid())
  number        String
  userId        String
  clientId      String // buyer
  vendorId      String // suplier
  invoiceId     String
  receiptNumber String
  total         Int
  date          DateTime
  dueDate       DateTime
  fromName      String // suplier
  fromEmail     String
  fromAddress   String
  clientName    String // buyer
  clientEmail   String
  clientAddress String
  note          String?
  status        ReceiptStatus

  itemId          String
  itemModel       String
  itemName        String
  itemDescription String
  itemQuatity     Int
  itemRate        Int
  itemTotal       Int

  // items Item[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Item      Item[]
}

model Voucher {
  id            String        @id @default(uuid())
  number        String
  clientId      String // buyer
  vendorId      String // suplier
  invoiceId     String
  receiptNumber String
  total         Int
  date          DateTime
  person        Int
  adult         Int
  child         Int
  pickUpPoint   String
  dropOffPoint  String
  fromEmail     String
  fromAddress   String
  clientName    String // buyer
  clientEmail   String
  clientAddress String
  note          String?
  status        VoucherStatus

  Items Item[]
  // itemId          String
  // itemModel       String
  // itemName        String
  // itemDescription String
  // itemQuatity     Int
  // itemRate        Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User   User?   @relation(fields: [userId], references: [id])
  userId String?
}

model TaxInvoiceReipt {
  id              String           @id @default(uuid())
  number          String
  clientId        String // buyer
  vendorId        String // suplier
  invoiceId       String
  receiptNumber   String
  total           Int
  date            DateTime
  dueDate         DateTime
  fromName        String // suplier
  fromEmail       String
  fromAddress     String
  clientName      String // buyer
  clientEmail     String
  clientAddress   String
  note            String?
  status          TaxInvoiceStatus
  itemName        String
  itemDescription String
  itemRate        Int
  itemQuantity    Int

  items Item[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User   User?   @relation(fields: [userId], references: [id])
  userId String?
}

model Item {
  id          String   @id @default(uuid())
  number      String
  model       String
  category    String
  name        String
  description String?
  quantity    Int
  rate        Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  PurchasingRequest   PurchasingRequest? @relation(fields: [purchasingRequestId], references: [id])
  purchasingRequestId String?
  PurchasingOrder     PurchasingOrder?   @relation(fields: [purchasingOrderId], references: [id])
  purchasingOrderId   String?
  Quotation           Quotation?         @relation(fields: [quotationId], references: [id])
  quotationId         String?
  // Invoice             Invoice?           @relation(fields: [invoiceId], references: [id])
  // invoiceId           String?
  Receipt             Receipt?           @relation(fields: [receiptId], references: [id])
  receiptId           String?
  Voucher             Voucher?           @relation(fields: [voucherId], references: [id])
  voucherId           String?
  TaxInvoiceReipt     TaxInvoiceReipt?   @relation(fields: [taxInvoiceReiptId], references: [id])
  taxInvoiceReiptId   String?
  // Invoice             Invoice?           @relation(fields: [invoiceId], references: [id])
  // invoiceId           String?
}

model Address {
  id           String         @id @default(uuid())
  street       String
  subDistrict  String
  district     String
  province     String
  postalCode   String
  country      String         @default("Thailand")
  latitude     Float?
  longitude    Float?
  placeId      String? // Google Place ID
  Organization Organization[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

model Organization {
  id        String   @id @default(uuid())
  name      String
  shortName String
  email     String
  phone     String
  address   Address  @relation(fields: [addressId], references: [id])
  addressId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
}

// model Organization {
//   id          String   @id @default(uuid())
//   name        String
//   shortName   String
//   adderss     String
//   subDistrict String
//   district    String
//   province    String
//   postalCode  String
//   country     String
//   phone       String
//   mobile      String
//   fax         String
//   email       String
//   taxId       String
//   website     String
//   logo        String
//   type        String
//   status      String
//   createdAt   DateTime @default(now())
//   updatedAt   DateTime @updatedAt
// }

enum PurchasingReqestStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

enum PurchasingOrderStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

enum QuotationStatus {
  DRAFT
  SENT
  ACCEPTED
  REJECTED
  EXPIRED
}

enum InvoiceStatus {
  PENDING
  OVERDUE
  PAID
  CANCELLED
  CANTCOLLECT
}

enum ReceiptStatus {
  PENDING
  PAID
  SENT
  CANCELLED
}

enum VoucherStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

enum TaxInvoiceStatus {
  SENT
  CANCELLED
}
